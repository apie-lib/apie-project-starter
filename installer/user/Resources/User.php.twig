<?php
namespace App\Apie\Example\Resources;

use Apie\CommonValueObjects\Email;
use Apie\Core\Entities\EntityInterface;
{% if config.enable2Fa -%}
use Apie\OtpValueObjects\TOTPSecret;
{%- endif %}
use Apie\Serializer\Exceptions\ValidationException;
use Apie\TextValueObjects\DatabaseText;
use Apie\TextValueObjects\EncryptedPassword;
use Apie\TextValueObjects\StrongPassword;
use App\Apie\Example\Identifiers\UserId;
{% if config.enable2Fa -%}use App\Apie\Example\ValueObjects\VerifyUserOTP;{%- endif %}
use LogicException;

final class User implements EntityInterface
{
    private EncryptedPassword $password;
    private ?DatabaseText $blockedReason = null;
    {% if config.enable2Fa -%}
    private TOTPSecret $totp;
    private bool $totpActivated = false;
    {% endif %}

    public function __construct(
        private UserId $email,
        StrongPassword $password
    ) {
        {% if config.enable2Fa -%}
        $this->totp = TotpSecret::createRandom();
        {%- endif %}
    
        $this->password = EncryptedPassword::fromUnencryptedPassword($password);
    }

    public function getId(): UserId
    {
        return $this->email;
    }

    public function getEmail(): Email
    {
        return $this->email;
    }

    public function isBlocked(): bool
    {
        return $this->blockedReason !== null;
    }

    public function getBlockedReason(): ?DatabaseText
    {
        return $this->blockedReason;
    }

    private function checkUnblocked(string $field): void
    {
        if ($this->blockedReason !== null) {
            throw ValidationException::createFromArray([
                $field => new LogicException('User "' . $this->email . '" is blocked!')
            ]);
        }
    }

    public function block(DatabaseText $blockedReason): User
    {
        $this->checkUnblocked('blockedReason');
        $this->blockedReason = $blockedReason;

        return $this;
    }

    public function unblock(): User
    {
        if ($this->blockedReason === null) {
            throw new LogicException('User "' . $this->email . '" is not blocked!');
        }
        $this->blockedReason = null;

        return $this;
    }

{% if config.enable2Fa -%}
    public function reset2FA(): void
    {
        $this->checkUnblocked('');
        $this->totp = TotpSecret::createRandom();
        $this->totpActivated = false;
    }
    
    public function enable2FA(VerifyUserOTP $otp): void
    {
        $this->checkUnblocked('otp');
        if ($this->totp->verify($otp)) {
            $this->totpActivated = true;
        } else {
            throw ValidationException::createFromArray([
                'otp' => new LogicException('Code is incorrect')
            ]);
        }
    }
{% endif %}

    public function verifyPassword(string $password): bool
    {
        $this->checkUnblocked('password');
        {% if config.enable2Fa -%}
        if (!$this->password->verifyUnencryptedPassword($password)) {
            return false;
        }
        if ($this->totpActivated && $totp) {
            return $this->totp->verify($otp);
        }
        
        return !$this->totpActivated;
        {%- else -%}
        return $this->password->verifyUnencryptedPassword($password);
        {%- endif %}

    }
}