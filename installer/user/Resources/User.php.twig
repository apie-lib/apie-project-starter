<?php
namespace App\Apie\Example\Resources;

use Apie\CommonValueObjects\Email;
use Apie\Core\Entities\EntityInterface;
{% if config.enable2Fa -%}
use Apie\OtpValueObjects\OTP;
use Apie\OtpValueObjects\TotpSecret;
{%- endif %}
use Apie\TextValueObjects\DatabaseText;
use Apie\TextValueObjects\EncryptedPassword;
use Apie\TextValueObjects\StrongPassword;
use App\Apie\Example\Identifiers\UserId;
use LogicException;

final class User implements EntityInterface
{
    private EncryptedPassword $password;
    private ?DatabaseText $blockedReason = null;
    {% if config.enable2Fa -%}
    private TotpSecret $totp;
    private bool $totpActivated = false;
    {% endif %}

    public function __construct(
        private UserId $email,
        StrongPassword $password
    ) {
        {% if config.enable2Fa -%}
        $this->totp = TotpSecret::createRandom();
        {%- endif %}
        $this->password = EncryptedPassword::fromUnencryptedPassword($password);
    }

    public function getId(): UserId
    {
        return $this->email;
    }

    public function getEmail(): Email
    {
        return $this->email;
    }

    public function isBlocked(): bool
    {
        return $this->blockedReason !== null;
    }

    public function getBlockedReason(): ?DatabaseText
    {
        return $this->blockedReason;
    }

    private function checkUnblocked(): void
    {
        if ($this->blockedReason !== null) {
            throw new LogicException('User "' . $this->email . '" is blocked!');
        }
    }

    public function block(DatabaseText $blockedReason): User
    {
        $this->checkUnblocked();
        $this->blockedReason = $blockedReason;

        return $this;
    }

    public function unblock(): User
    {
        if ($this->blockedReason === null) {
            throw new LogicException('User "' . $this->email . '" is not blocked!');
        }
        $this->blockedReason = null;

        return $this;
    }

    public function reset2FA(): void
    {
        $this->totp = TotpSecret::createRandom();
        $this->totpActivated = false;
    }
    
    public function enable2FA(OTP $otp): void
    {
        if ($this->totp->verify($otp)) {
            $this->totpActivated = true;
        }
    }

    public function verifyPassword(string $password): bool
    {
        $this->checkUnblocked();
        {% if config.enable2Fa -%}
        if (!$this->encryptedPassword->verify($password)) {
            return false;
        }
        if ($this->totpActivated && $totp) {
            return $this->totp->verify($otp);
        }
        
        return !$this->totpActivated;
        {%- else -%}
        return $this->password->verifyUnencryptedPassword($password);
        {%- endif %}
    }
}