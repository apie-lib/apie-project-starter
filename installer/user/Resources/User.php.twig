<?php
namespace App\Apie\Example\Resources;

use Apie\CommonValueObjects\Email;
use Apie\Core\Entities\EntityInterface;
use Apie\TextValueObjects\DatabaseText;
use Apie\TextValueObjects\EncryptedPassword;
use Apie\TextValueObjects\StrongPassword;
use App\Apie\Example\Identifiers\UserId;
use LogicException;

class User implements EntityInterface
{
    private EncryptedPassword $password;
    private ?DatabaseText $blockedReason = null;

    public function __construct(
        private UserId $email,
        StrongPassword $password
    ) {
        $this->password = EncryptedPassword::fromUnencryptedPassword($password);
    }

    public function getId(): UserId
    {
        return $this->email;
    }

    public function getEmail(): Email
    {
        return $this->email;
    }

    public function isBlocked(): bool
    {
        return $this->blockedReason !== null;
    }

    public function getBlockedReason(): ?DatabaseText
    {
        return $this->blockedReason;
    }

    private function checkUnblocked(): void
    {
        if ($this->blockedReason !== null) {
            throw new LogicException('User "' . $this->email . '" is blocked!');
        }
    }

    public function block(DatabaseText $blockedReason): User
    {
        $this->checkUnblocked();
        $this->blockedReason = $blockedReason;

        return $this;
    }

    public function unblock(): User
    {
        if ($this->blockedReason === null) {
            throw new LogicException('User "' . $this->email . '" is not blocked!');
        }
        $this->blockedReason = null;

        return $this;
    }

    public function verifyPassword(string $password): bool
    {
        $this->checkUnblocked();
        return $this->password->verifyUnencryptedPassword($password);
    }
}